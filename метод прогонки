#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

vector<double> Metod_Progonki(const vector<vector<double>>& A, const vector<double>& B) {
    int n = A.size();

    // Известные константы
    double k1 = -A[0][1];
    double m1 = B[0];
    double k2 = -A[n - 1][n - 2];
    double m2 = B[n - 1];

    double alfa = k1;
    double beta = m1;

    // Поиск альф и бет
    int c = 2;
    int a = 0;
    int b = 1;

    vector<double> alf = { alfa };
    vector<double> bet = { beta };

    for (int i = 1; i < n - 1; i++) {
        beta = (B[i] - A[i][a] * beta) / (A[i][a] * alfa + A[i][b]);
        alfa = -A[i][c] / (A[i][a] * alfa + A[i][b]);
        a += 1;
        b += 1;
        c += 1;
        alf.push_back(alfa);
        bet.push_back(beta);
    }

    // Расчет игриков
    double y = (k2 * beta + m2) / (1 - k2 * alfa);
    vector<double> otv = { y };

    for (int i = alf.size() - 1; i >= 0; i--) {
        y = alf[i] * y + bet[i];
        otv.push_back(y);
    }

    // Переворачиваем значения в списке
    vector<double> otvet;
    for (int i = otv.size() - 1; i >= 0; i--) {
        otvet.push_back(otv[i]);
    }

    return otvet;
}

int main() {
    // Задаем матрицу системы
    vector<vector<double>> A = {
        {1, -6, 0, 0},
        {2, -2, 4, 0},
        {0, -1, -4, 6},
        {0, 0, 8, 1}
    };

    vector<double> B = { 45, -36, 3, -79 };

    // Вывод матрицы и вектора
    cout << "Matrix A:" << endl;
    for (const auto& row : A) {
        for (double val : row) {
            cout << val << " ";
        }
        cout << endl;
    }

    cout << "\nVector B:" << endl;
    for (double val : B) {
        cout << val << " ";
    }
    cout << endl;

    // Вычисление и вывод результата
    vector<double> result = Metod_Progonki(A, B);

    cout << "\nResult:" << endl;
    for (double val : result) {
        cout << val << " ";
    }
    cout << endl;

    return 0;
}
