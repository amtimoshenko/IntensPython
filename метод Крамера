#include <iostream>
#include <vector>
#include <stdexcept>

using namespace std;

// Функция для вычисления определителя матрицы
double determinant(vector<vector<double>> matrix) {
    int n = matrix.size();
    double det = 1.0;

    for (int i = 0; i < n; ++i) {
        // Поиск ведущего элемента в столбце i
        int maxRow = i;
        for (int k = i + 1; k < n; ++k) {
            if (abs(matrix[k][i]) > abs(matrix[maxRow][i])) {
                maxRow = k;
            }
        }

        // Перестановка строк, если нужно
        if (maxRow != i) {
            swap(matrix[i], matrix[maxRow]);
            det *= -1; // При перестановке строк определитель меняет знак
        }

        // Если ведущий элемент нулевой, то определитель 0
        if (matrix[i][i] == 0.0) {
            return 0.0;
        }

        // Приведение к треугольному виду
        for (int k = i + 1; k < n; ++k) {
            double factor = matrix[k][i] / matrix[i][i];
            for (int j = i; j < n; ++j) {
                matrix[k][j] -= factor * matrix[i][j];
            }
        }
    }

    // Вычисление определителя как произведения диагональных элементов
    for (int i = 0; i < n; ++i) {
        det *= matrix[i][i];
    }

    return det;
}

// Функция для решения системы уравнений методом Крамера
vector<double> cramerRule(vector<vector<double>> A, vector<double> B) {
    int n = A.size();
    if (n != B.size() &&  n == 0 &&  A[0].size() != n) {
        throw invalid_argument("Некорректные размеры матрицы или вектора");
    }

    double detA = determinant(A);
    if (detA == 0.0) {
        throw runtime_error("Определитель матрицы коэффициентов равен нулю, метод Крамера не применим.");
    }

    vector<double> solutions(n);

    for (int i = 0; i < n; ++i) {
        vector<vector<double>> Ai = A; // Копируем матрицу A
        // Заменяем i-й столбец на вектор B
        for (int j = 0; j < n; ++j) {
            Ai[j][i] = B[j];
        }
        solutions[i] = determinant(Ai) / detA;
    }

    return solutions;
}

int main() {
    try {
        // Матрица коэффициентов системы уравнений
        vector<vector<double>> A = {
            {1, 1, 1, 1},
            {5, -3, 2, -8},
            {3, 5, 1, 4},
            {4, 2, 3, 1}
        };

        // Вектор правой части
        vector<double> B = { 0, 1, 0, 3 };

        // Решение системы методом Крамера
        vector<double> solutions = cramerRule(A, B);

        // Вывод результатов
        cout << "Result:" << endl;
        for (int i = 0; i < solutions.size(); ++i) {
            cout << "x" << i + 1 << " = " << solutions[i] << endl;
        }
    }
    catch (const exception& e) {
        cerr << "Error: " << e.what() << endl;
        return 1;
    }

    return 0;
}
