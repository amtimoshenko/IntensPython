#include <iostream>
#include <cmath>

using namespace std;

const double G = 9.81; 

double calculateFlightTime(double H, double V, double alpha) {
    return (V * sin(alpha) / G) * (1 + sqrt(1 + (2 * G * H) / (V * V * sin(alpha) * sin(alpha))));
}

double calculateFlightTimeBinarySearch(double H, double V, double alpha, double tolerance = 0.0001) {
    double left = 0.0; 
    double right = 100.0;
    double middle;

    auto y = [&](double t) { return H + V * t * sin(alpha) - G * t * t / 2; };

    while (right - left > tolerance) {
        middle = (left + right) / 2.0;

        if (y(middle) > 0) {
            left = middle;
        }
        else {
            right = middle;
        }
    }

    return (left + right) / 2.0; 
}


int main() {
    double H, V, alpha, t;

    cout << "Vvedite H: ";
    cin >> H;

    cout << "Vvedite V: ";
    cin >> V;

    cout << "Vvedite alpha: ";
    cin >> alpha;

    cout << "Vvedite t: ";
    cin >> t;

    double x = V * t * cos(alpha);
    double y = H + V * t * sin(alpha) - G * t * t / 2;

    cout << "x(t) = " << x << endl;
    cout << "y(t) = " << y <<  endl;

    double flightTimeAnalytic = calculateFlightTime(H, V, alpha);
    double flightTimeNumeric = calculateFlightTimeBinarySearch(H, V, alpha);


    cout << "Time (analitic): " << flightTimeAnalytic <<  endl;
    cout << "Time (root): " << flightTimeNumeric <<  endl;

    return 0;
}
