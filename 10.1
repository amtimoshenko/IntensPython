#include <iostream>
#include <cmath>

using namespace std;

const double G = 6.672e-11;
const double M = 5.96e24;
const double R = 6.37e6;

double calculate_g(double h) {
    return G * M / pow(R + h, 2);
}

double find_height_bisection(double target_g, double tolerance = 1e-6) {
    double low = 0.0;
    double high = 1000; 

    if (target_g <= 0.0) {
        cerr << "Error" << endl;
        return numeric_limits<double>::quiet_NaN();
    }

    for (int i = 0; i < 100; ++i) {
        double mid = (low + high) / 2.0;
        double g_mid = calculate_g(mid);

        if (abs(g_mid - target_g) < tolerance) {
            return mid;
        }
        else if (g_mid > target_g) {
            low = mid; 
        }
        else {
            high = mid; 
        }
    }
    return (low + high) / 2.0;
}

int main() {
    double target_g;

    cout << "Enter g: ";
    cin >> target_g;

    double h = find_height_bisection(target_g);

    if (isnan(h)) {
        return 1; 
    }

    cout << " h= " << h << endl;

    return 0;
}

